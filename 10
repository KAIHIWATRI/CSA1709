import heapq

class Node:
    def __init__(self, name, parent=None, g=0, h=0):
        self.name = name
        self.parent = parent
        self.g = g  # Cost so far
        self.h = h  # Heuristic
        self.f = g + h

    def __lt__(self, other):
        return self.f < other.f


def astar(graph, heuristics, start, goal):
    open_list = []
    closed_set = set()

    start_node = Node(start, None, 0, heuristics[start])
    heapq.heappush(open_list, start_node)

    while open_list:
        current = heapq.heappop(open_list)

        if current.name == goal:
            path = []
            while current:
                path.append(current.name)
                current = current.parent
            path = path[::-1]
            return path, path_cost(path, graph)

        closed_set.add(current.name)

        for neighbor, cost in graph.get(current.name, {}).items():
            if neighbor in closed_set:
                continue
            g = current.g + cost
            h = heuristics.get(neighbor, 0)
            neighbor_node = Node(neighbor, current, g, h)

            if any(open_node.name == neighbor and open_node.f <= neighbor_node.f for open_node in open_list):
                continue

            heapq.heappush(open_list, neighbor_node)

    return None, float("inf")


def path_cost(path, graph):
    """Calculate cost of a given path safely."""
    cost = 0
    for i in range(len(path) - 1):
        u, v = path[i], path[i+1]
        if v in graph.get(u, {}):
            cost += graph[u][v]
        else:
            raise ValueError(f"Edge {u} -> {v} not found in graph!")
    return cost


# Example usage
if __name__ == "__main__":
    graph = {
        'A': {'B': 1, 'C': 3},
        'B': {'D': 3, 'E': 1},
        'C': {'F': 5},
        'D': {'G': 2},
        'E': {'G': 1},
        'F': {'G': 2},
        'G': {}   # Must have entry for completeness
    }

    heuristics = {
        'A': 7,
        'B': 6,
        'C': 5,
        'D': 3,
        'E': 1,
        'F': 2,
        'G': 0
    }

    path, cost = astar(graph, heuristics, 'A', 'G')
    print("Optimal Path:", path)
    print("Total Cost:", cost)
