import heapq

# Goal state for the 8 puzzle
goal_state = [[1, 2, 3],
              [4, 5, 6],
              [7, 8, 0]]  # 0 represents the blank

# Moves: up, down, left, right
moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]

# Helper: Convert list of lists to tuple (so it can be used in sets/dicts)
def state_to_tuple(state):
    return tuple(tuple(row) for row in state)

# Find position of blank (0)
def find_blank(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j

# Manhattan distance heuristic
def manhattan_distance(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            val = state[i][j]
            if val != 0:  # Skip blank
                goal_x, goal_y = divmod(val - 1, 3)
                distance += abs(i - goal_x) + abs(j - goal_y)
    return distance

# Generate possible next states
def get_neighbors(state):
    neighbors = []
    x, y = find_blank(state)

    for dx, dy in moves:
        new_x, new_y = x + dx, y + dy
        if 0 <= new_x < 3 and 0 <= new_y < 3:
            new_state = [row[:] for row in state]
            new_state[x][y], new_state[new_x][new_y] = new_state[new_x][new_y], new_state[x][y]
            neighbors.append(new_state)
    return neighbors

# A* Search algorithm
def solve_puzzle(start_state):
    pq = []  # priority queue
    g_score = {state_to_tuple(start_state): 0}
    f_score = {state_to_tuple(start_state): manhattan_distance(start_state)}
    heapq.heappush(pq, (f_score[state_to_tuple(start_state)], start_state, []))

    visited = set()

    while pq:
        _, current, path = heapq.heappop(pq)
        if current == goal_state:
            return path + [current]

        visited.add(state_to_tuple(current))

        for neighbor in get_neighbors(current):
            neighbor_tuple = state_to_tuple(neighbor)
            tentative_g = g_score[state_to_tuple(current)] + 1

            if neighbor_tuple in visited and tentative_g >= g_score.get(neighbor_tuple, float('inf')):
                continue

            if tentative_g < g_score.get(neighbor_tuple, float('inf')):
                g_score[neighbor_tuple] = tentative_g
                f_score[neighbor_tuple] = tentative_g + manhattan_distance(neighbor)
                heapq.heappush(pq, (f_score[neighbor_tuple], neighbor, path + [current]))

    return None  # No solution

# Pretty print
def print_state(state):
    for row in state:
        print(" ".join(str(x) if x != 0 else " " for x in row))
    print()

# Example Usage
if __name__ == "__main__":
    start_state = [[1, 2, 3],
                   [4, 0, 6],
                   [7, 5, 8]]

    solution = solve_puzzle(start_state)

    if solution:
        print("Solution found in", len(solution)-1, "moves:\n")
        for step in solution:
            print_state(step)
    else:
        print("No solution exists!")
