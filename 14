import math

# Print the board
def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 9)

# Check winner
def check_winner(board, player):
    # Rows
    for row in board:
        if all(cell == player for cell in row):
            return True
    # Columns
    for col in range(3):
        if all(board[row][col] == player for row in range(3)):
            return True
    # Diagonals
    if all(board[i][i] == player for i in range(3)):
        return True
    if all(board[i][2-i] == player for i in range(3)):
        return True
    return False

# Check if board is full
def is_full(board):
    return all(cell != " " for row in board for cell in row)

# Minimax with Alpha-Beta Pruning
def minimax(board, depth, alpha, beta, is_maximizing):
    if check_winner(board, "O"):  # AI wins
        return 1
    if check_winner(board, "X"):  # Human wins
        return -1
    if is_full(board):  # Draw
        return 0

    if is_maximizing:  # AI (O)
        best_score = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = "O"
                    score = minimax(board, depth + 1, alpha, beta, False)
                    board[i][j] = " "
                    best_score = max(best_score, score)
                    alpha = max(alpha, score)
                    if beta <= alpha:  # prune
                        return best_score
        return best_score
    else:  # Human (X)
        best_score = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = "X"
                    score = minimax(board, depth + 1, alpha, beta, True)
                    board[i][j] = " "
                    best_score = min(best_score, score)
                    beta = min(beta, score)
                    if beta <= alpha:  # prune
                        return best_score
        return best_score

# Best move for AI
def best_move(board):
    best_score = -math.inf
    move = None
    for i in range(3):
        for j in range(3):
            if board[i][j] == " ":
                board[i][j] = "O"
                score = minimax(board, 0, -math.inf, math.inf, False)
                board[i][j] = " "
                if score > best_score:
                    best_score = score
                    move = (i, j)
    return move

# Main game loop
def play_game():
    board = [[" " for _ in range(3)] for _ in range(3)]
    print("Welcome to Tic Tac Toe with Alpha-Beta Pruning (You = X, AI = O)")
    print_board(board)

    while True:
        # Human move
        row = int(input("Enter row (0-2): "))
        col = int(input("Enter col (0-2): "))
        if board[row][col] != " ":
            print("Cell already taken! Try again.")
            continue
        board[row][col] = "X"
        print_board(board)

        if check_winner(board, "X"):
            print("ðŸŽ‰ You win!")
            break
        if is_full(board):
            print("It's a draw!")
            break

        # AI move
        print("AI is thinking...")
        move = best_move(board)
        board[move[0]][move[1]] = "O"
        print_board(board)

        if check_winner(board, "O"):
            print("ðŸ’» AI wins!")
            break
        if is_full(board):
            print("It's a draw!")
            break

if __name__ == "__main__":
    play_game()
