from collections import deque

# Function to check if target can be measured
def water_jug_bfs(jug1, jug2, target):
    # To keep track of visited states
    visited = set()
    
    # Queue for BFS (stores (jug1_state, jug2_state))
    queue = deque()
    queue.append((0, 0))  # Start with both jugs empty

    while queue:
        a, b = queue.popleft()

        # If we reach target
        if a == target or b == target:
            print("Solution found!")
            print(f"Jug1: {a}, Jug2: {b}")
            return True

        if (a, b) in visited:
            continue
        visited.add((a, b))

        # Possible next states
        next_states = [
            (jug1, b),  # Fill jug1
            (a, jug2),  # Fill jug2
            (0, b),     # Empty jug1
            (a, 0),     # Empty jug2
            (a - min(a, jug2 - b), b + min(a, jug2 - b)),  # Pour jug1 -> jug2
            (a + min(b, jug1 - a), b - min(b, jug1 - a))   # Pour jug2 -> jug1
        ]

        for state in next_states:
            if state not in visited:
                queue.append(state)

    print("No solution exists")
    return False


# Example usage
if __name__ == "__main__":
    jug1_capacity = 4
    jug2_capacity = 3
    target = 2

    water_jug_bfs(jug1_capacity, jug2_capacity, target)
